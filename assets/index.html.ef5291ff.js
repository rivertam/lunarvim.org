import{r as o,o as c,c as i,a as s,b as a,w as p,F as u,d as n,e as l}from"./app.ba8a48bd.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const d={},k=s("h1",{id:"plugins",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#plugins","aria-hidden":"true"},"#"),n(" Plugins")],-1),m=n("Plugins are managed by "),h={href:"https://github.com/wbthomason/packer.nvim",target:"_blank",rel:"noopener noreferrer"},b=n("Packer"),g=n(", and are split into "),_=n("core-plugins"),f=n(" and user-plugins."),v=n("from "),y={href:"https://github.com/lunarvim/lunarvim/blob/10c7753d8e6f572974f9b9e0d0d8631cd13e60ea/lua/lvim/plugin-loader.lua",target:"_blank",rel:"noopener noreferrer"},w=n("lua/lvim/plugin-loader.lua"),q=n(":"),x=l(`<div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code><span class="token comment">--- to check the full configuration \`:lua print(vim.inspect(require(&#39;packer&#39;).config))\`</span>
<span class="token keyword">local</span> compile_path <span class="token operator">=</span> <span class="token function">join_paths</span><span class="token punctuation">(</span><span class="token function">get_config_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;plugin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;packer_compiled.lua&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> snapshot_path <span class="token operator">=</span> <span class="token function">join_paths</span><span class="token punctuation">(</span><span class="token function">get_cache_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;snapshots&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">local</span> package_root <span class="token operator">=</span> <span class="token function">join_paths</span><span class="token punctuation">(</span>vim<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">stdpath</span><span class="token punctuation">(</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;site&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pack&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">local</span> init_opts <span class="token operator">=</span> <span class="token punctuation">{</span>
  package_root <span class="token operator">=</span> package_root<span class="token punctuation">,</span>
  compile_path <span class="token operator">=</span> compile_path<span class="token punctuation">,</span>
  snapshot_path <span class="token operator">=</span> snapshot_path<span class="token punctuation">,</span>
  log <span class="token operator">=</span> <span class="token punctuation">{</span> level <span class="token operator">=</span> <span class="token string">&quot;warn&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  git <span class="token operator">=</span> <span class="token punctuation">{</span>
    clone_timeout <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  display <span class="token operator">=</span> <span class="token punctuation">{</span>
    open_fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;packer.util&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">float</span> <span class="token punctuation">{</span> border <span class="token operator">=</span> <span class="token string">&quot;rounded&quot;</span> <span class="token punctuation">}</span>
    <span class="token keyword">end</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

packer<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>init_opts<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>use <code>:PackerStatus</code> to see a list of all installed plugins!</p></div><h2 id="core-plugins" tabindex="-1"><a class="header-anchor" href="#core-plugins" aria-hidden="true">#</a> Core plugins</h2><p>The configurations for core plugins are accessible through <code>lvim.builtin</code>. Most should contain an <code>active</code> attribute that can be set to <code>false</code> to disable the plugin</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>alpha<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>dap<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span> <span class="token comment">-- (default: false)</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>terminal<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token keyword">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">IMPORTANT</p><p>disabling a plugin will not take effect until you run <code>:PackerSync</code> or preferably <code>:LvimSyncCorePlugins</code></p></div><p>You can press <code>&lt;TAB&gt;</code> to get autocomplete suggestions to explore these settings.</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>cmp<span class="token punctuation">.</span>completion<span class="token punctuation">.</span>keyword_length <span class="token operator">=</span> <span class="token number">2</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>telescope<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>layout_config<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">0.95</span>
lvim<span class="token punctuation">.</span>builtin<span class="token punctuation">.</span>telescope<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>layout_config<span class="token punctuation">.</span>preview_cutoff <span class="token operator">=</span> <span class="token number">75</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>A plugin&#39;s README (and <code>docs/</code> folder if it exists) typically contain excellent documentation, so it may be worthwhile to create an alias for if you use them often.</p></div><h3 id="pinning-strategy" tabindex="-1"><a class="header-anchor" href="#pinning-strategy" aria-hidden="true">#</a> Pinning strategy</h3>`,10),P=n("Snapshot support has been added in "),L={href:"https://github.com/LunarVim/LunarVim/pull/2351",target:"_blank",rel:"noopener noreferrer"},I=n("lunarvim#2351"),S=n(":"),V=l(`<blockquote><ol><li>add a default snapshot, <code>snapshots/default.json</code>, to hold the commits of all the core plugins</li><li><code>LvimSyncCorePlugins</code> now uses <code>:PackerSnapshotRollback</code></li><li>reduce errors caused by breaking changes in user plugins since they&#39;re not handled anymore with <code>packer.sync()</code></li><li><code>PackerSync</code> will now ignore all the core plugins which are already handled with snapshots, this makes it signficantly faster to finish.</li><li>allow &quot;unlocking&quot; all the core plugins, by setting an environment variable <code>$LVIM_DEV_MODE</code>, e.g. can be defined in <code>~/.local/bin/lvim</code></li><li><code>$LUNARVIM_CACHE_DIR/snapshots/</code> can be used to store complete snapshots of <em>all</em> the installed plugins, <code>:h packer.snapshot()</code>.</li><li>add a new handler to allow updating <code>snapshots/default.json</code> that does not rely on packer or lvim&#39;s runtime. It could be completely re-written in any other language.</li></ol></blockquote><h2 id="user-plugins" tabindex="-1"><a class="header-anchor" href="#user-plugins" aria-hidden="true">#</a> User plugins</h2><p>User plugins can be installed by adding entries to the <code>lvim.plugins</code> table in your <code>config.lua</code> file, and saving or manually invoking <code>LvimReload</code> will trigger Packer to sync all the plugins in that table.</p><div class="language-lua ext-lua line-numbers-mode"><pre class="language-lua"><code>lvim<span class="token punctuation">.</span>plugins <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">{</span><span class="token string">&quot;lunarvim/colorschemes&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span><span class="token string">&quot;folke/tokyonight.nvim&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,4),C=n("Check the "),E=n("extra plugins"),R=n(" for some suggestions."),T=s("p",null,[s("em",null,[n("Note: removing a plugin from the "),s("code",null,"lvim.plugin"),n(" table removes it from your configuration but not your system. Any plugins left in the "),s("code",null,"start"),n(" directory will still autostart. To remove them completely, run "),s("code",null,":PackerSync"),n(".")])],-1);function A(N,M){const t=o("ExternalLinkIcon"),e=o("RouterLink");return c(),i(u,null,[k,s("p",null,[m,s("a",h,[b,a(t)]),g,a(e,{to:"/plugins/01-core-plugins-list.html"},{default:p(()=>[_]),_:1}),f]),s("ul",null,[s("li",null,[v,s("a",y,[w,a(t)]),q])]),x,s("p",null,[P,s("a",L,[I,a(t)]),S]),V,s("p",null,[C,a(e,{to:"/plugins/02-extra-plugins.html"},{default:p(()=>[E]),_:1}),R]),T],64)}var D=r(d,[["render",A]]);export{D as default};
